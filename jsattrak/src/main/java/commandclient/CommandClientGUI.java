/*
 * CommandClientGUI.java
 * =====================================================================
 *   This file is part of JSatTrak.
 *
 *   Copyright 2007-2013 Shawn E. Gano
 *   
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *   
 *       http://www.apache.org/licenses/LICENSE-2.0
 *   
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * =====================================================================
 *
 * Created on February 28, 2008, 1:26 PM
 */

/* test:
JFrame frame = new JFrame();
frame.setVisible(true);
p = frame.getContentPane();
g= new JPanel();
p.add(g);
g.add(new JLabel("test"))
(then move frame?)
 */

package commandclient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

/**
 *
 * @author  sgano
 */
public class CommandClientGUI extends javax.swing.JFrame
{
    Socket kkSocket = null;
    PrintWriter out = null;
    BufferedReader in = null;

    /** Creates new form CommandClientGUI */
    public CommandClientGUI()
    {
        initComponents();
        
        this.setTitle("Command Client");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmdTextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("IP:");

        hostTextField.setText("localhost");

        jLabel2.setText("Port:");

        portTextField.setText("2249");

        connectButton.setText("Connect");
        connectButton.setToolTipText("Send command 'exit' to close connection");
        connectButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Command:");

        cmdTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdTextFieldActionPerformed(evt);
            }
        });
        cmdTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                cmdTextFieldPropertyChange(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("log:");

        logTextArea.setColumns(20);
        logTextArea.setEditable(false);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        clearButton.setText("Clear Log");
        clearButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sendButton)
                    .addComponent(cmdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(clearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectButtonActionPerformed
    {//GEN-HEADEREND:event_connectButtonActionPerformed
        // get host and port
        String host = hostTextField.getText();
        int port = Integer.parseInt(portTextField.getText());
        
        try
        {
            kkSocket = new Socket(host, port);
            out = new PrintWriter(kkSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(kkSocket.getInputStream()));
            
            // wait for reply from server
            String fromServer = in.readLine();
            // add repsonse to log:
            clearLog();
            addMessageToLog("Server:" + fromServer);
        
        }
        catch (UnknownHostException e)
        {
            //System.err.println("Don't know about host: " + host);
            JOptionPane.showMessageDialog(this, "Don't know about host: " + host);
            return;
        }
        catch (IOException e)
        {
            //System.err.println("Couldn't get I/O for the connection to: " + host + ":" + port);
            JOptionPane.showMessageDialog(this, "Couldn't get I/O for the connection to: " + host + ":" + port);
            return;
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "ERROR:" + e.toString());
        }
                
        // if made it here connectio made      
        setGUIConnectionMode(true);
        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendButtonActionPerformed
    {//GEN-HEADEREND:event_sendButtonActionPerformed
        sendCommandAction();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void sendCommandAction()
    {
        this.addMessageToLog(">" + cmdTextField.getText());
        sendCommandToServer(cmdTextField.getText());
        cmdTextField.setText(""); // clear cmd after sent
    }
    
    private void cmdTextFieldPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_cmdTextFieldPropertyChange
    {//GEN-HEADEREND:event_cmdTextFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdTextFieldPropertyChange

    private void cmdTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdTextFieldActionPerformed
    {//GEN-HEADEREND:event_cmdTextFieldActionPerformed
        sendCommandAction(); // takes an enter and sends command
    }//GEN-LAST:event_cmdTextFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
    {//GEN-HEADEREND:event_clearButtonActionPerformed
        clearLog();
    }//GEN-LAST:event_clearButtonActionPerformed
    
    private void addMessageToLog(String msg)
    {
        //logTextArea.append(msg + "\n");
        System.out.println("TXT:" + logTextArea.getText() + msg );
        logTextArea.setText( logTextArea.getText() + msg + "\n");
    }
    
    private void clearLog()
    {
        logTextArea.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new CommandClientGUI().setVisible(true);
            }
        });
    }

    private void sendCommandToServer(String cmd)
    {
        if(out == null)
        {
            JOptionPane.showMessageDialog(this, "ERROR: No connection");
            setGUIConnectionMode(false);
            return;
        }
        
        // see if we want to exit
        if (cmd.trim().equalsIgnoreCase("exit"))
        {
            try{
            out.close();
            in.close();
            kkSocket.close();
            }catch(Exception e){}
            
            this.addMessageToLog("---- Connection closed by user -----");
            setGUIConnectionMode(false);
            return;
        }
        
        
        try
        {
            // send command 
            out.println(cmd);
            
            // wait for reply from server
            String fromServer = in.readLine();
            
            // add repsonse to log:
            addMessageToLog("Server:" + fromServer);
        
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "ERROR:" + e.toString());
            setGUIConnectionMode(false);
            return;
        }
    }
    
    private void setGUIConnectionMode(boolean connectionWorking)
    {
        connectButton.setEnabled(!connectionWorking); // so can't create another connection
        sendButton.setEnabled(connectionWorking);
        hostTextField.setEditable(!connectionWorking);
        portTextField.setEditable(!connectionWorking);
        cmdTextField.setEditable(connectionWorking);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField cmdTextField;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
    
}


